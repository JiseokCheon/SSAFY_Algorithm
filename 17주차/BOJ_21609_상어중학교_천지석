import java.io.*;
import java.util.StringTokenizer;


public class Main {

    static int N, M;
    static int[][] d = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    static int[][] visited;
    static int[][] arr;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        arr = new int[N][N];
        int answer = 0;

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }


        while (true) {
            int[] maxCnt = new int[2];
            int[] maxXY = new int[2];

            visited = new int[N][N];
            int num = 1;

            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (arr[i][j] > 0 && visited[i][j] == 0) {
                        visited[i][j] = num;
                        int[] cnt = findGroup(i, j, num++, arr[i][j]);

                        if (cnt[0] > 1 && (maxCnt[0] < cnt[0] || maxCnt[0] == cnt[0] && maxCnt[1] < cnt[1]
                                || maxCnt[0] == cnt[0] && maxCnt[1] == cnt[1] && maxXY[0] < i
                                || maxCnt[0] == cnt[0] && maxCnt[1] == cnt[1] && maxXY[0] == i && maxXY[1] < j)) {
                            maxCnt = cnt.clone();
                            maxXY[0] = i;
                            maxXY[1] = j;
                        }
                    }
                }
            }

            if (maxCnt[0] == 0) {
                break;
            } else {

                answer += Math.pow(maxCnt[0], 2);
                visited = new int[N][N];
                deleteBlock(maxXY[0], maxXY[1], arr[maxXY[0]][maxXY[1]]);
                gravity();
                arr = rotate();
                gravity();
            }
        }
        System.out.println(answer);
    }

    static int[] findGroup(int x, int y, int num, int color) {
        int[] cnt = {1, 0};
        if (arr[x][y] == 0) {
            cnt[1]++;
        }
        for (int i = 0; i < 4; i++) {
            int nextX = x + d[i][0];
            int nextY = y + d[i][1];

            if (nextX >= 0 && nextY >= 0 && nextX < N && nextY < N
                    && (arr[nextX][nextY] == color || arr[nextX][nextY] == 0) && visited[nextX][nextY] != num) {
                visited[nextX][nextY] = num;
                int[] findCnt = findGroup(nextX, nextY, num, color);
                cnt[0] += findCnt[0];
                cnt[1] += findCnt[1];
            }
        }

        return cnt;
    }

    static void deleteBlock(int x, int y, int color) {
        arr[x][y] = -2;

        for (int i = 0; i < 4; i++) {
            int nextX = x + d[i][0];
            int nextY = y + d[i][1];

            if (nextX >= 0 && nextY >= 0 && nextX < N && nextY < N
                    && (arr[nextX][nextY] == color || arr[nextX][nextY] == 0) && visited[nextX][nextY] == 0) {
                deleteBlock(nextX, nextY, color);
            }
        }
    }

    static int[][] rotate() {
        int[][] temp = new int[N][N];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                temp[i][j] = arr[j][N - i - 1];
            }
        }
        return temp;
    }


    static void gravity() {
        for (int j = 0; j < N; j++) {
            int x = N - 1;
            for (int i = N - 1; i >= 0; i--) {
                if (arr[i][j] == -1) {
                    x = i - 1;
                } else if (arr[i][j] > -1) {
                    if (x != i) {
                        arr[x][j] = arr[i][j];
                        arr[i][j] = -2;
                    }
                    x--;
                }
            }
        }
    }
}

